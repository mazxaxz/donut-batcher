// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mazxaxz/donut-batcher/internal/platform/mongodb (interfaces: Clienter,SingleResulter)

// Package mock_mongodb is a generated GoMock package.
package mock_mongodb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongodb "github.com/mazxaxz/donut-batcher/internal/platform/mongodb"
	bson "go.mongodb.org/mongo-driver/bson"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockClienter is a mock of Clienter interface.
type MockClienter struct {
	ctrl     *gomock.Controller
	recorder *MockClienterMockRecorder
}

// MockClienterMockRecorder is the mock recorder for MockClienter.
type MockClienterMockRecorder struct {
	mock *MockClienter
}

// NewMockClienter creates a new mock instance.
func NewMockClienter(ctrl *gomock.Controller) *MockClienter {
	mock := &MockClienter{ctrl: ctrl}
	mock.recorder = &MockClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClienter) EXPECT() *MockClienterMockRecorder {
	return m.recorder
}

// CreateIndex mocks base method.
func (m *MockClienter) CreateIndex(arg0 context.Context, arg1 string, arg2 mongo.IndexModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndex indicates an expected call of CreateIndex.
func (mr *MockClienterMockRecorder) CreateIndex(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockClienter)(nil).CreateIndex), arg0, arg1, arg2)
}

// Find mocks base method.
func (m *MockClienter) Find(arg0 context.Context, arg1 string, arg2 interface{}, arg3 *options.FindOptions) (*mongo.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*mongo.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockClienterMockRecorder) Find(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockClienter)(nil).Find), arg0, arg1, arg2, arg3)
}

// FindOne mocks base method.
func (m *MockClienter) FindOne(arg0 context.Context, arg1 string, arg2 interface{}) mongodb.SingleResulter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1, arg2)
	ret0, _ := ret[0].(mongodb.SingleResulter)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockClienterMockRecorder) FindOne(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockClienter)(nil).FindOne), arg0, arg1, arg2)
}

// InsertOne mocks base method.
func (m *MockClienter) InsertOne(arg0 context.Context, arg1 string, arg2 interface{}) (*mongo.InsertOneResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0, arg1, arg2)
	ret0, _ := ret[0].(*mongo.InsertOneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockClienterMockRecorder) InsertOne(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockClienter)(nil).InsertOne), arg0, arg1, arg2)
}

// UpdateOne mocks base method.
func (m *MockClienter) UpdateOne(arg0 context.Context, arg1 string, arg2, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockClienterMockRecorder) UpdateOne(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockClienter)(nil).UpdateOne), arg0, arg1, arg2, arg3)
}

// WithinTransaction mocks base method.
func (m *MockClienter) WithinTransaction(arg0 context.Context, arg1 mongodb.TransactionCallback) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithinTransaction", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithinTransaction indicates an expected call of WithinTransaction.
func (mr *MockClienterMockRecorder) WithinTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithinTransaction", reflect.TypeOf((*MockClienter)(nil).WithinTransaction), arg0, arg1)
}

// MockSingleResulter is a mock of SingleResulter interface.
type MockSingleResulter struct {
	ctrl     *gomock.Controller
	recorder *MockSingleResulterMockRecorder
}

// MockSingleResulterMockRecorder is the mock recorder for MockSingleResulter.
type MockSingleResulterMockRecorder struct {
	mock *MockSingleResulter
}

// NewMockSingleResulter creates a new mock instance.
func NewMockSingleResulter(ctrl *gomock.Controller) *MockSingleResulter {
	mock := &MockSingleResulter{ctrl: ctrl}
	mock.recorder = &MockSingleResulterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSingleResulter) EXPECT() *MockSingleResulterMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockSingleResulter) Decode(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockSingleResulterMockRecorder) Decode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockSingleResulter)(nil).Decode), arg0)
}

// DecodeBytes mocks base method.
func (m *MockSingleResulter) DecodeBytes() (bson.Raw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeBytes")
	ret0, _ := ret[0].(bson.Raw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeBytes indicates an expected call of DecodeBytes.
func (mr *MockSingleResulterMockRecorder) DecodeBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeBytes", reflect.TypeOf((*MockSingleResulter)(nil).DecodeBytes))
}

// Err mocks base method.
func (m *MockSingleResulter) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockSingleResulterMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockSingleResulter)(nil).Err))
}
