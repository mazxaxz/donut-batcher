// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mazxaxz/donut-batcher/internal/batch (interfaces: Service)

// Package mock_batch is a generated GoMock package.
package mock_batch

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	batch "github.com/mazxaxz/donut-batcher/internal/batch"
	transaction "github.com/mazxaxz/donut-batcher/pkg/message/transaction"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Batch mocks base method.
func (m *MockService) Batch(arg0 context.Context, arg1 transaction.Transaction) (batch.BatchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Batch", arg0, arg1)
	ret0, _ := ret[0].(batch.BatchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Batch indicates an expected call of Batch.
func (mr *MockServiceMockRecorder) Batch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockService)(nil).Batch), arg0, arg1)
}

// Dispatch mocks base method.
func (m *MockService) Dispatch(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockServiceMockRecorder) Dispatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockService)(nil).Dispatch), arg0, arg1)
}

// Index mocks base method.
func (m *MockService) Index(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Index", arg0)
}

// Index indicates an expected call of Index.
func (mr *MockServiceMockRecorder) Index(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockService)(nil).Index), arg0)
}

// Paginate mocks base method.
func (m *MockService) Paginate(arg0 context.Context, arg1, arg2 int, arg3 bool, arg4 *batch.Status) ([]batch.Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paginate", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]batch.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Paginate indicates an expected call of Paginate.
func (mr *MockServiceMockRecorder) Paginate(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paginate", reflect.TypeOf((*MockService)(nil).Paginate), arg0, arg1, arg2, arg3, arg4)
}
